A Lumen-based endpoint to render shapes based on a shapes json format;

Example JSON:
{"shapes":[{"type": "polygon","x":200,"y":200,"size": 50,"sides":6,"fill":{"type":"solid","color":"blue"},"border":{"color": "yellow","width": 2}},{"type": "polygon","x":250,"y":80,"size": 80,"sides":4,"fill":{"type":"solid","color":"red"},"border":{"color": "gray","width": 3}},{"type": "polygon","x":350,"y":150,"size": 80,"sides":5,"fill":{"type":"solid","color":"black"},"border":{"color": "navy","width": 3}},{"type": "polygon","x":300,"y":300,"size": 80,"sides":3,"fill":{"type":"solid","color":"green"},"border":{"color": "fuchsia","width": 3}},{"type": "circle","x":0,"y":0,"perimeter": 300,"fill":{"type":"solid","color":"green"},"border":{"color": "red","width": 2}},{"type": "square","x":550,"y":90,"sideLength": 150,"fill":{"type":"solid","color":"blue"},"border": {"color": "#776cff","width": 2}},{"type": "rectangle","x":30,"y":250,"width": 600,"height":100,"fill":{"type":"solid","color":"red"},"border": {"color": "#ff6cff","width": 3}}]}



The app has 4 ways it can render the same binary image;
1. JS Procedural functions using Canvas HTML Element (under public/js)
2. JS Prototype OOP using Canvas HTML Element (under public/js)
3. JS Prototype OOP using SVG Element (under public/js)
4. OOP Php (under app/models)

Technical Thoughts;
1. The app supports adding shapes in an easy way for PHP. Just add a new graphical element class under /app/Models/Shapes/ and use it in the json (small case). In a real world application there would be 1 way of rendering. Adding another shape on JS would also be very simple. Currently supported shapes (Rectangle, Square, Circle, Polygon based on sides). Can easily include more shapes.
2. The app uses Lumen framework, Blade for rendering page templates and Server-side Form validation.
3. Configuration is in .env file (mainly stage width and height are configurable, can easily also factor background ..etc)
4. Php and JS source code is documented with standard documentation formats 
5. Some phpunit tests were added to test Php models
6. The app has 2 Routes (/shapes and /shapes/render). The '/shapes/render' depends on 'rendering_side' variables.
7. The app supports HTML color names in Php and JS through the Colorable traits.
8. The Shape models also handle parse errors gracefully by making them available on the Stage instance 'errors' property after parsing fails.


Thanks,
Yehia


